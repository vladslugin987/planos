// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  settings      UserSettings?
  events        Event[]
  notes         Note[]
  tasks         Task[]
  transactions  Transaction[]
  categories    Category[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Settings - API keys и настройки
model UserSettings {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  openaiApiKey       String?
  githubToken        String?
  githubClientId     String?
  githubClientSecret String?

  language          String @default("ru")
  calendarStartHour Int    @default(6)
  calendarEndHour   Int    @default(20)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Calendar Events
model Event {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String
  description String?
  day         Int // 0-6 (Mon-Sun)
  startTime   Int // hours (0-24)
  startMinute Int     @default(0)
  endTime     Int
  endMinute   Int     @default(0)
  color       String?
  week        Int? // which week relative to current

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Sticky Notes
model Note {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  text      String
  x         Float
  y         Float
  color     String
  collapsed Boolean @default(false)
  width     Float?
  height    Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Categories for Tasks and Transactions
model Category {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name  String
  color String
  type  String // task, transaction

  tasks        Task[]
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tasks with checklist items
model Task {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String
  description String?
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  priority String    @default("medium") // low, medium, high
  status   String    @default("todo") // todo, in_progress, completed
  dueDate  DateTime?

  items TaskItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Checklist items for tasks
model TaskItem {
  id     String @id @default(cuid())
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  text      String
  completed Boolean @default(false)
  order     Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Financial Transactions
model Transaction {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type     String // income, expense
  amount   Float
  currency String @default("USD")

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  description String?
  date        DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
